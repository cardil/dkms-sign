#!/usr/bin/env bash
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Sign and load custom modules
# Inspired by: https://www.majlovesreg.one/thoughts/sign-virtualbox-on-ubuntu-16-04-with-secure-boot-enabled/

readonly uid="$(id -u)"
if (( uid )); then
  readonly etc_dir="${HOME}/.config/dkms-sign"
else
  readonly etc_dir='/etc/dkms/sign'
fi
readonly modulelist_file="${etc_dir}/modules.list"
readonly modulelist_dir="${etc_dir}/modules.list.d"
readonly keys_dir="${etc_dir}/keys"
readonly passphrase_file="${etc_dir}/.passphrase"

declare -a modules

function check {
  if [[ -f "${keys_dir}/MOK.priv.gpg" ]] \
    && [[ -f "${keys_dir}/MOK.der" ]] \
    && [[ -f "${passphrase_file}" ]]; then
    return 0
  else
    echo "Signing keys are missing. Run \`$0 setup\` first!" 1>&2
    return 1
  fi
}

function privatekey.decrypt {
  gpg -d --batch --passphrase-file "${passphrase_file}" \
    "${keys_dir}/MOK.priv.gpg" > "${keys_dir}/MOK.priv" 2>/dev/null
  trap privatekey.delete EXIT
}

function privatekey.delete {
  shred -vfuz "${keys_dir}/MOK.priv" 2>/dev/null
}

function modules.list {
  local ml module
  if [[ -f "$modulelist_file" ]]; then
    while read -r module; do
      modules+=("$module")
    done < "$modulelist_file"
  fi
  if ! ls "${modulelist_dir}"/*.list 2>/dev/null 1>&2; then
    return 0
  fi
  for ml in "${modulelist_dir}"/*.list; do
    while read -r module; do
      modules+=("$module")
    done < "$ml"
  done
}

# Sign modules
function command.sign {
  local module modulefile modulefile_basename modulefile_suffix target

  check
  privatekey.decrypt
  modules.list

  for module in "${modules[@]}"; do
    if [[ -z "${module}" ]]; then continue; fi
    echo "Processing ${module}:"
    if ! modulefile="$(modinfo -n "${module}" 2>/dev/null)"; then
      echo -e "\e[90m - Module not found.\e[0m"
      continue
    fi
    if modinfo "${module}" | grep -q 'signature:'; then
      echo -e "\e[93m - Module is already signed.\e[0m"
    else
      target="${modulefile}"
      modulefile_basename="${modulefile:0:-3}"
      modulefile_suffix="${modulefile: -3}"

      if [[ "$modulefile_suffix" == ".xz" ]]; then
        unxz "${modulefile}"
        target="$modulefile_basename"
      fi
      if [[ "$modulefile_suffix" == ".gz" ]]; then
        gunzip "${modulefile}"
        target="$modulefile_basename"
      fi

      "/usr/src/kernels/$(uname -r)/scripts/sign-file" sha256 \
        "${keys_dir}/MOK.priv" "${keys_dir}/MOK.der" "${target}"
      
      if [[ "$modulefile_suffix" == ".xz" ]]; then
        xz -f "${modulefile_basename}"
      fi
      if [[ "$modulefile_suffix" == ".gz" ]]; then
        gzip -9f "${modulefile_basename}"
      fi

      echo -e "\e[92m - Module successfully signed.\e[0m"
    fi
  done
}

function command.setup {
  local name email passphrase enroll_pass inputfile
  inputfile="$(mktemp --tmpdir dkmssign.XXXXXX)"
  dialog --clear --backtitle 'DKMS sign setup' \
    --title 'Key subject' \
    --inputbox 'Please enter your name (name & surname):' 0 0 \
    2> "${inputfile}"
  name="$(cat "${inputfile}")"

  dialog --clear --backtitle 'DKMS sign setup' \
    --title 'Key subject' \
    --inputbox 'Please enter your email:' 0 0 \
    2> "${inputfile}"
  email="$(cat "${inputfile}")"
  
  dialog --clear --backtitle 'DKMS sign setup' \
    --title 'Key passphrase' \
    --passwordbox 'Please enter key passphrase.\n\nLeave blank if you want to be autogenerated.' 0 0 \
    2> "${inputfile}"
  passphrase="$(cat "${inputfile}")"

  dialog --clear --backtitle 'DKMS sign setup' \
    --title 'MOK enroll password' \
    --passwordbox 'Please enter enroll password.\n\nYou will need to type it at next boot to enroll MOK (Machine Owner Key).' 0 0 \
    2> "${inputfile}"
  enroll_pass="$(cat "${inputfile}")"

  rm -f "${inputfile}"

  # shellcheck disable=SC2001
  if ! dialog --clear --backtitle 'DKMS sign setup' \
    --title 'Confirm configuration' \
    --yesno "Confirm below configuration: \n\nName: ${name}\nEmail: ${email}\nPassphrase: $(echo "${passphrase}" | sed "s#.#\*#g")\nMOK enroll password: $(echo "${enroll_pass}" | sed "s#.#\*#g")" 0 0; then
    echo 'Cancelled.'
    return 2
  fi

  if [[ -z "${passphrase}" ]]; then
    passphrase="$(pwgen -1Bsy 32 1)"
  fi
  rm -f "${passphrase_file}"
  echo -n "${passphrase}" > "${passphrase_file}"
  chmod 400 "${passphrase_file}"
  
  openssl req -new -x509 \
    -newkey rsa:2048 \
    -keyout "${keys_dir}/MOK.priv" \
    -outform DER -out "${keys_dir}/MOK.der" \
    -nodes -days 36500 -subj "/CN=${name} <${email}>/" 2>/dev/null
  rm -f "${keys_dir}/MOK.priv.gpg"
  gpg -c --batch --passphrase-file "${passphrase_file}" "${keys_dir}/MOK.priv"
  privatekey.delete

  if mokutil --list-new >/dev/null 2>&1; then
    mokutil --revoke-import
  fi
  expect <(cat <<EOD
log_user 0
spawn mokutil --import "${keys_dir}/MOK.der"
expect "*password: "
send "${enroll_pass}\r"
expect "*password again: "
send "${enroll_pass}\r"
interact
EOD
  )
  
  if dialog --clear --backtitle 'DKMS sign setup' \
    --title 'DKMS sign configured' \
    --yesno 'System is configured for signing custom DKMS modules with MOK (Machine Owner Key). \n\nBefore it can be used, computer must be restarted.\n\nDo you want to perform restart now?' 0 0; then
    exec shutdown -r now
  fi
}

function command.help {
  echo "$0 - a tool to enable signing and using of custom modules with Secure Boot"
  echo
  echo 'Commands:'
  echo " * sign  - sign custom modules, listed in ${modulelist_file} and ${modulelist_dir}."
  echo ' * setup - creates a keys and registers them in Secure Boot'
  echo ' * help  - shows this help'
  echo
}
